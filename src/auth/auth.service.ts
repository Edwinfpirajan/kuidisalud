import {
  BadRequestException,
  ForbiddenException,
  Injectable,
  Inject,
  Scope,
  Body,
} from '@nestjs/common';
import { REQUEST } from '@nestjs/core';
import { Request } from 'express';
import { UsersService } from 'src/users/users.service';
import * as argon2 from 'argon2';
import { JwtService } from '@nestjs/jwt';
import { ConfigService } from '@nestjs/config';
import { AuthDto } from './dto/auth.dto';
import { IJwtPayload } from './dto/jwt-payload.interface';
import { Role } from 'src/users/schemas/role.enum';
import { User } from '@prisma/client';
import { SmsService } from '../sms-service/sms-service.service'; // Twilio
import { generateOTPCode } from '../otp/otp.utils';
import { generateKuidisUserCode } from 'src/common/utils/generateKuidisUserCode.utils';
import { MailerService } from 'src/mailer/mailer.service';
import { Templates, getTemplate } from 'src/templates/templates.service';

@Injectable({ scope: Scope.REQUEST })
export class AuthService {
  constructor(
    private usersService: UsersService,
    private jwtService: JwtService,
    private configService: ConfigService,
    @Inject(REQUEST) private readonly request: Request,
    private readonly twilioService: SmsService,
    private readonly sendGridService: MailerService,
  ) {}

  /* 
    User methods 
  */

  async signUp(@Body() createUserDto: User): Promise<any> {
    /* Check if user exists */
    const userExists = await this.usersService.findByEmail(createUserDto.email);
    if (userExists) {
      throw new BadRequestException('Usuario ya registrado');
    }
    /* Validate role  */
    if (createUserDto.role === Role.ADMIN) {
      throw new BadRequestException("You can't create this roletype user");
    }
    /* Hash password  */
    const hash = await this.hashData(createUserDto.password);

    /* Kuidis autogenerated code three first chars */
    const nameChars = createUserDto.primer_nombre.substring(0, 3).toUpperCase();
    const lastNameChars = createUserDto.primer_apellido
      .substring(0, 3)
      .toUpperCase();

    /* Hashing password and calling the generateKuidisUserCode function */
    const newUser = await this.usersService.create({
      ...createUserDto,
      codigo_usuario: generateKuidisUserCode(`${nameChars}${lastNameChars}`),
      activo: true,
      password: hash,
    });

    const tokens = await this.getTokens(
      JSON.stringify(newUser.id),
      newUser.email,
    );

    /* Return tokens; */
    await this.updateRefreshToken(newUser.id, tokens.refreshToken);

    /* Twilio success message  */
    /* try {
      await this.twilioService.sendSMS(
        createUserDto.cellphone,
        `Welcome to the Service Station Platform, your account has been successfully created.`,
      );
    } catch (e) {
      console.error(e);
    } */

    /* JWT Payload to sign  */
    const payload: IJwtPayload = {
      id: newUser.id,
      email: newUser.email,
      name: `${newUser.primer_nombre} ${newUser.segundo_nombre ?? ''} ${
        newUser.primer_apellido
      } ${newUser.segundo_apellido ?? ''}`,
      role: newUser.role,
    };

    const token = await this.jwtService.sign(payload);
    /* Twilio sendGrid success message  */

    let signupTemplate = getTemplate(Templates.SignUp);
    signupTemplate = signupTemplate.replace(':nombre:',newUser.primer_nombre);
    signupTemplate = signupTemplate.replace(RegExp(`:link:`, 'g'), `${process.env.HOST_API}/success_registration?token=${token}`);

    await this.sendGridService.sendConfirmationEmail(
      newUser.email,
      'Confirma tu registro',
      signupTemplate
    );
    return {
      token,
      email: newUser.email,
      name: `${
        newUser.segundo_nombre?.length
          ? newUser.primer_nombre + ' '
          : newUser.primer_nombre
      }${newUser.segundo_nombre ?? ''} ${newUser.primer_apellido} ${
        newUser.segundo_apellido ?? ' '
      }`.trim(),
      firstName: newUser.primer_nombre,
      middleName: newUser.segundo_nombre,
      firstSurname: newUser.primer_apellido,
      secondSurname: newUser.segundo_apellido,
      kuidiscode: newUser.codigo_usuario,
      rol: newUser.role,
      roles: newUser?.user_roles,
    };

    
  }

  async verificarCuenta(userId: number) {
    let data: any = {email_verificado: false}
    const userExists = await this.usersService.findById(userId.toString());
    if (!userExists) {
     data.error = 'token inválido o vencido';
     return data;
    }

    await this.usersService.update(userId, data);
    return data;
  }

  async obtenerRefreshToken(email: string) {
    let data: any = {}
    const user = await this.usersService.findByEmail(email);
    if (!user) {
     data.error = 'email no registrado';
     return data;
    }
    const tokens = await this.getTokens(JSON.stringify(user.id), user.email);
    await this.updateRefreshToken(user.id, tokens.refreshToken);
    data.refreshToken = tokens.refreshToken;
    return data;
  }

  /* Admin and User signin  */
  async signIn(data: AuthDto): Promise<any> {
    const user = await this.usersService.findByEmail(data.email);
    if (!user) throw new BadRequestException('Usuario no registrado');
    const passwordMatches = await argon2.verify(user.password, data.password);
    if (!passwordMatches)
      throw new BadRequestException('Contraseña incorrecta');

    /* 
      Set users as active as 
       they're logged in  
    */
    const newUser = {
      //password: hash,
      conectado: true,
    };

    await this.usersService.update(user.id, newUser);

    /* JWT Payload to sign  */
    const tokens = await this.getTokens(
      JSON.stringify(user.id),
      user.email,
      user,
    );
    await this.updateRefreshToken(user.id, tokens.refreshToken);
    /* return tokens; */

    /* JWT Payload to sign */
    const payload: IJwtPayload = {
      id: user.id,
      email: user.email,
      name: `${user.primer_nombre} ${user.segundo_apellido ?? ''} ${
        user.primer_apellido
      } ${user.segundo_apellido ?? ''}`,
      role: user.role,
    };

    const token = await this.jwtService.sign(payload);
    return {
      token,
      email: user.email,
      name: `${
        user.segundo_nombre?.length
          ? user.primer_nombre + ' '
          : user.primer_nombre
      }${user.segundo_nombre ?? ''} ${user.primer_apellido} ${
        user.segundo_apellido ?? ' '
      }`.trim(),
      firstName: user.primer_nombre,
      middleName: user.segundo_nombre,
      firstSurname: user.primer_apellido,
      secondSurname: user.segundo_apellido,
      kuidiscode: user.codigo_usuario,
      rol: user.role,
      roles: user?.user_roles,
      email_verficado: user.email_verificado
    };
  }

  /* 
    User Password Recovery 
  */
  async recovery(data: User): Promise<any> {
    const user = await this.usersService.findByEmail(data.email);
    if (!user) throw new BadRequestException('User does not exist');

    const hash = await this.hashData(data.newPassword);
    user.password = hash;
    user.newPassword =  hash;

    return await this.usersService.update(user.id, user);
  }

  /* Refresh the JWT tokens */
  async refreshTokens(userId: string, refreshToken: string) {
    const user = await this.usersService.findById(userId);
    if (!user || !user.refreshToken)
      throw new ForbiddenException('Access Denied');
    const refreshTokenMatches = await argon2.verify(
      user.refreshToken,
      refreshToken,
    );
    if (!refreshTokenMatches) throw new ForbiddenException('Access Denied');
    const tokens = await this.getTokens(JSON.stringify(user.id), user.email);
    await this.updateRefreshToken(user.id, tokens.refreshToken);
    return tokens;
  }

  hashData(data: string) {
    return argon2.hash(data);
  }

  /* Update the JWT tokens */
  async updateRefreshToken(userId: number, refreshToken: string) {
    const hashedRefreshToken = await this.hashData(refreshToken);
    await this.usersService.update(userId, {
      refreshToken: hashedRefreshToken,
    });
  }

  async getTokens(userId: string, email: string, user?: User) {
    const [accessToken, refreshToken] = await Promise.all([
      this.jwtService.signAsync(
        {
          sub: userId,
          email,
          user,
        },
        {
          secret: this.configService.get<string>('JWT_ACCESS_SECRET'),
          expiresIn: '15m',
        },
      ),
      this.jwtService.signAsync(
        {
          sub: userId,
          email,
          user,
        },
        {
          secret: this.configService.get<string>('JWT_REFRESH_SECRET'),
          expiresIn: '7d',
        },
      ),
    ]);

    return {
      accessToken,
      refreshToken,
      user,
    };
  }
}
